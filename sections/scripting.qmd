# {{< fa code size=1x >}} &nbsp;&nbsp;Scripting

<!-- Side 1 -->
## Queries from R

In the previous section, we saw how to *find* data, and used manual downloads to get a local copy.

You will often need to automatize this process for multiple files.


<br> <br>

R lets you download and import the data directly if you have the url, by using the `download.file()` function:

```{r}
#| echo: true
#| eval: false

download.file("https://geodata.ucdavis.edu/gadm/gadm4.1/gpkg/gadm41_FRA.gpkg", destfile = here::here("data", "fr_2.gpkg"))
```



<!-- Side 2 -->
## Queries from R

In the previous section, we saw how to **find** data, and used manual downloads to get a local copy.

You will often need to automatize this process, e.g. if the data is updated regularly.


<br> <br>

R lets you download and import the data directly if you have the url, by using the `download.file()` function:

```{r}
#| echo: true
#| eval: false

download.file("https://geodata.ucdavis.edu/gadm/gadm4.1/gpkg/gadm41_FRA.gpkg", destfile = here::here("data", "fr_2.gpkg"))
```

<br>

> Sometimes it sends strange errors on windows. Simply add  `mode = "wb"`

```{r}
#| echo: true
#| eval: false

download.file("https://geodata.ucdavis.edu/gadm/gadm4.1/gpkg/gadm41_FRA.gpkg", destfile = here::here("data", "fr_2.gpkg"), mode = "wb")
```





<!-- Side 5 -->

## What if the file is compressed ?

<br> <br>

You can use the helper functions `unzip()`, `gzfile()` etc but it's unnecessary for most R reading functions:

```{r}
#| echo: true
#| eval: false

download.file("http://www.sociopatterns.org/wp-content/uploads/2015/07/Friendship-network_data_2013.csv.gz", destfile = here::here("data", "friends.gz"))

# all of these work fine: 
friends <- read.table(gzfile( here::here("data", "friends.gz")))
friends <- read.csv2(gzfile( here::here("data", "friends.gz")), sep = " ")
friends <- read.table(here::here("data", "friends.gz"))
```

<br> <br>

Other useful packages: `data.table`, `vroom`, ...




<!-- Side 6 -->

## R packages for data download{.nostretch}

Some R packages have been tailored specifically to facilitate the data access.

For WorldClim data: check out the `geodata` package.

```{r}
#| echo: true
#| eval: false

?geodata::worldclim_country

```



<!-- Side 7 -->

## R packages for data download{.nostretch}

Some R packages have been tailored specifically to facilitate the data access.

For WorldClim data: check out the `geodata` package.

```{r}
#| echo: true
#| eval: false
#| 
?geodata::worldclim_country

```

<br> <br>

To retrieve average WorldClim temperatures for France:

```{r}
#| echo: true
#| eval: false

fr <- geodata::worldclim_country("France", var = "tavg", "temp.tif")

# Have a look at this object:
fr
```

![](images/spatraster.png) 



<!-- Side 8 -->

## R packages for data download{.nostretch}


Use the `terra` package to plot it.

```{r}
#| echo: true
#| eval: false


# plot the first monthly average: 
terra::plot(fr$FRA_wc2.1_30s_tavg_1)

```

![](images/worldclim_fr_tavg.png){fig-align="center" width=50%}


