# {{< fa wrench size=1x >}} &nbsp;&nbsp;API



## Accessing data from the Web

<br/><br/><br/><br/>

:::: { .columns }
::: { .column .center width="45%"}
![**User interface**](images/user-interface.png)
:::
::: { .column .center width="10%"}
:::
::: { .column .center width="45%"}
![**Code interface**](images/code-interface.png)
:::
::::

:::: { .columns }
::: { .column .center width="45%"}
{{< fa computer-mouse size=lg >}}
:::
::: { .column .center width="10%"}
:::
::: { .column .center width="45%"}
{{< fa code size=lg >}}
:::
::::

<!--

## API - Definition

Abbreviation of **Application Programming Interface**[^1]

- It is a type of software interface, offering a service to other pieces of software.
- In contrast to a _user interface_, which connects a software to a person, an API connects pieces of software to each other.
- **_API specification_**: documentation describing how to use such a connection ([Swagger](https://swagger.io/)).

. . .

<br><br>

Different types of API:

- Library and framework API
- Operating systems API
- Remote API
- **Web API**


[^1]: Source: [Wikipedia](https://en.wikipedia.org/wiki/API)
-->

## (RESTful) Web API

> **Definition**: A service accessed from a client device (mobile phones, laptops, etc.) to a Web server using the Hypertext Transfer Protocol (HTTP)[^2].

- The **client** sends an HTTP **request** to the Web server
- The Web **server** sends back a **response** in [**JSON**](https://en.wikipedia.org/wiki/JSON) or [**XML**](https://en.wikipedia.org/wiki/XML) format (raw data)
- The Web server exposes one or more **endpoints** (predefined request/response)


![**Code interface**](images/code-interface.png){width=50% fig-align='center'}

[^2]: Source: [Wikipedia](https://en.wikipedia.org/wiki/Web_API)



## (RESTful) Web API

:::: {.columns}
::: {.column width=50%}
**Advantages** (for the user)

- User can create its own client
- Client can be developed in any language
- User can include the service in a bigger project
- User access raw data

<br><br>

> Writing code means **automation** and **reproducibility**
:::


::: {.column width=50%}
:::

::::




## (RESTful) Web API

:::: {.columns}
::: {.column width=50%}
**Advantages** (for the user)

- User can create its own client
- Client can be developed in any language
- User can include the service in a bigger project
- User access raw data

<br><br>

> Writing code means **automation** and **reproducibility**
:::


::: {.column width=50%}
**Limitations**

- Each API has its own specification
- Authentication method (free or not)
  - Token
  - Login and password
- Some restrictions
  - Number of requests per day/month
  - Number of records per request
  - Incomplete data
:::

::::



## Example of APIs

_This is a non-exhaustive list_

<br>

:::: {.columns}

::: {.column width=50%}
**Biodiversity data**

- Global Biodiversity Information Facility (GBIF) - [`API`](https://techdocs.gbif.org/en/openapi/)
- IUCN Red List - [`API`](https://apiv3.iucnredlist.org/api/v3/docs)
- Fishbase - [`API`](https://fishbaseapi.readme.io/reference/getting-started)
- Species+/CITES Checklist - [`API`](https://api.speciesplus.net/)
- Knowledge Network for Biocomplexity (KNB) - [`API`](https://knb.ecoinformatics.org/api)

**Taxonomy**

- Encyclopedia of Life (EOL) - [`API`](https://eol.org/docs/what-is-eol/classic-apis)
- Integrated Taxonomic Information System (ITIS) - [`API`](https://www.itis.gov/ws_description.html)
- Barcode of Life Data (BOLD) - [`API`](https://v3.boldsystems.org/index.php/api_home)
- World Register of Marine Species (WoRMS) - [`API`](https://www.marinespecies.org/rest/)
:::

::: {.column width=10%}
:::

::: {.column width=40%}
**Scientific literature**

- Web of Science - [`API`](https://developer.clarivate.com/apis)
- Scopus - [`API`](https://dev.elsevier.com/)
- CrossRef - [`API`](https://www.crossref.org/documentation/retrieve-metadata/rest-api/)
- OpenAlex - [`API`](https://docs.openalex.org/how-to-use-the-api/api-overview)

**Others**

- Wikipedia - [`API`](https://www.mediawiki.org/wiki/API:Main_page)
- OpenStreetMap - [`API`](https://wiki.openstreetmap.org/wiki/API)
- Zenodo - [`API`](https://developers.zenodo.org/)
:::

::::


## How does it work?

> Requesting an API is based on the **client-server protocol**

![](images/request-response.png){width=80% fig-align='center'}





## API Client

> It's the tool you use to request the API and parse the response (data).

<br>

. . .

If you are lucky, an API client will **already be available**.

<br>

Non-exhaustive list of {{< fa brands r-project>}} packages

:::: {.columns}

::: {.column width=25%}
- [`rgbif`](https://docs.ropensci.org/rgbif/articles/rgbif.html)
- [`taxize`](https://docs.ropensci.org/taxize/articles/taxize.html)
- [`rcites`](https://docs.ropensci.org/rcites/)
:::

::: {.column width=25%}
- [`rredlist`](https://docs.ropensci.org/rredlist/)
- [`rfishbase`](https://docs.ropensci.org/rfishbase/)
- [`WikipediR`](https://github.com/Ironholds/WikipediR/)
:::

::: {.column width=25%}
- [`rwosstarter`](https://frbcesab.github.io/rwosstarter)
- [`rscopus`](https://github.com/muschellij2/rscopus)
- [`rcrossref`](https://docs.ropensci.org/rcrossref/)
:::

::: {.column width=25%}
- [`openalexR`](https://docs.ropensci.org/openalexR/)
- [`osmdata`](https://docs.ropensci.org/osmdata/)
:::

::::

. . .

<br><br>


{{< fa circle-right >}} &nbsp;Otherwise you will have to **build your own client**.


## Building an API client


:::: {.columns}

::: {.column width=50%}
![](images/httr2-screenshot.png)

<br>

Available at: <https://httr2.r-lib.org/>
:::

::: {.column width=50%}
<br>

```{r}
#| eval: false
#| echo: true

# Install 'httr2' package ----
install.packages("httr2")
```

<br>


| Function              | Description                              |
|:----------------------|:-----------------------------------------|
| `request()`           | Create an HTTP request                   |
| `req_url_query()`     | Add parameters to an HTTP request        |
| `req_perform()`       | Send HTTP request to an API              |
| `resp_status()`       | Check the HTTP response status           |
| `resp_content_type()` | Check the content type of the response   |
| `resp_body_json()`    | Parse the response content (JSON format) |
| `resp_body_xml()`     | Parse the response content (XML format)  |

: Table: Main functions of `httr2`
:::
::::


## Building an API client

Example with the **OpenStreetMap Nominatim** [API](https://nominatim.org/release-docs/develop/api/Overview/)

> Retrieve coordinates from a location (city, address, building, etc.)


[![](images/nominatim-screenshot.png){width=70% fig-align='center'}](https://nominatim.openstreetmap.org/ui/search.html)



## Nominatim API client

:::: {.columns}
::: {.column width=50%}
**1. Build the HTTP request**

```{r}
#| echo: true
#| eval: true

# Nominatim API endpoint ----
endpoint <- "https://nominatim.openstreetmap.org/search"

# Prepare the HTTP request ----
http_request <- httr2::request(endpoint)
```

```
https://nominatim.openstreetmap.org/search
```
:::

::: {.column width=50%}
:::
::::



## Nominatim API client

:::: {.columns}
::: {.column width=50%}
**1. Build the HTTP request**

```{r}
#| echo: true
#| eval: true

# Nominatim API endpoint ----
endpoint <- "https://nominatim.openstreetmap.org/search"

# Prepare the HTTP request ----
http_request <- httr2::request(endpoint)
```

```
https://nominatim.openstreetmap.org/search
```

<br>


```{r}
#| echo: true
#| eval: true
# Append request parameters ----
http_request <- http_request |> 
  httr2::req_url_query(city    = "Montpellier") |> 
  httr2::req_url_query(country = "France")
```

```
https://nominatim.openstreetmap.org/search?city=Montpellier&country=France
```
:::

::: {.column width=50%}
:::
::::


## Nominatim API client

:::: {.columns}
::: {.column width=50%}
**1. Build the HTTP request**

```{r}
#| echo: true
#| eval: true

# Nominatim API endpoint ----
endpoint <- "https://nominatim.openstreetmap.org/search"

# Prepare the HTTP request ----
http_request <- httr2::request(endpoint)
```

```
https://nominatim.openstreetmap.org/search
```

<br>


```{r}
#| echo: true
#| eval: true
# Append request parameters ----
http_request <- http_request |> 
  httr2::req_url_query(city    = "Montpellier") |> 
  httr2::req_url_query(country = "France")
```

```
https://nominatim.openstreetmap.org/search?city=Montpellier&country=France
```

<br>


```{r}
#| echo: true
#| eval: true

# Append response parameters ----
http_request <- http_request |> 
  httr2::req_url_query(format = "json") |> 
  httr2::req_url_query(limit  = 1)
```

```
https://nominatim.openstreetmap.org/search?city=Montpellier&country=France&
format=json&limit=1
```
:::

::: {.column width=50%}
:::
::::



## Nominatim API client

:::: {.columns}
::: {.column width=50%}
**1. Build the HTTP request**

```{r}
#| echo: true
#| eval: true

# Nominatim API endpoint ----
endpoint <- "https://nominatim.openstreetmap.org/search"

# Prepare the HTTP request ----
http_request <- httr2::request(endpoint)
```

```
https://nominatim.openstreetmap.org/search
```

<br>


```{r}
#| echo: true
#| eval: true
# Append request parameters ----
http_request <- http_request |> 
  httr2::req_url_query(city    = "Montpellier") |> 
  httr2::req_url_query(country = "France")
```

```
https://nominatim.openstreetmap.org/search?city=Montpellier&country=France
```

<br>


```{r}
#| echo: true
#| eval: true

# Append response parameters ----
http_request <- http_request |> 
  httr2::req_url_query(format = "json") |> 
  httr2::req_url_query(limit  = 1)
```

```
https://nominatim.openstreetmap.org/search?city=Montpellier&country=France&
format=json&limit=1
```
:::

::: {.column width=50%}
**2. Send the HTTP request**

```{r}
#| echo: true
#| eval: true

# Send HTTP request  ----
http_response <- httr2::req_perform(http_request)
```

```
Status: 200 OK
Content-Type: application/json
```
:::
::::


## Nominatim API client

:::: {.columns}
::: {.column width=50%}
**1. Build the HTTP request**

```{r}
#| echo: true
#| eval: true

# Nominatim API endpoint ----
endpoint <- "https://nominatim.openstreetmap.org/search"

# Prepare the HTTP request ----
http_request <- httr2::request(endpoint)
```

```
https://nominatim.openstreetmap.org/search
```

<br>


```{r}
#| echo: true
#| eval: true
# Append request parameters ----
http_request <- http_request |> 
  httr2::req_url_query(city    = "Montpellier") |> 
  httr2::req_url_query(country = "France")
```

```
https://nominatim.openstreetmap.org/search?city=Montpellier&country=France
```

<br>


```{r}
#| echo: true
#| eval: true

# Append response parameters ----
http_request <- http_request |> 
  httr2::req_url_query(format = "json") |> 
  httr2::req_url_query(limit  = 1)
```

```
https://nominatim.openstreetmap.org/search?city=Montpellier&country=France&
format=json&limit=1
```
:::

::: {.column width=50%}
**2. Send the HTTP request**

```{r}
#| echo: true
#| eval: true
# Send HTTP request  ----
http_response <- httr2::req_perform(http_request)
```

```
Status: 200 OK
Content-Type: application/json
```

<br>

**3. Check response status**

```{r}
#| echo: true
#| eval: true

# Check response status ----
httr2::resp_status(http_response)
```
:::
::::



## Nominatim API client

:::: {.columns}
::: {.column width=50%}
**1. Build the HTTP request**

```{r}
#| echo: true
#| eval: true

# Nominatim API endpoint ----
endpoint <- "https://nominatim.openstreetmap.org/search"

# Prepare the HTTP request ----
http_request <- httr2::request(endpoint)
```

```
https://nominatim.openstreetmap.org/search
```

<br>


```{r}
#| echo: true
#| eval: true
# Append request parameters ----
http_request <- http_request |> 
  httr2::req_url_query(city    = "Montpellier") |> 
  httr2::req_url_query(country = "France")
```

```
https://nominatim.openstreetmap.org/search?city=Montpellier&country=France
```

<br>


```{r}
#| echo: true
#| eval: true

# Append response parameters ----
http_request <- http_request |> 
  httr2::req_url_query(format = "json") |> 
  httr2::req_url_query(limit  = 1)
```

```
https://nominatim.openstreetmap.org/search?city=Montpellier&country=France&
format=json&limit=1
```
:::

::: {.column width=50%}
**2. Send the HTTP request**

```{r}
#| echo: true
#| eval: true
# Send HTTP request  ----
http_response <- httr2::req_perform(http_request)
```

```
Status: 200 OK
Content-Type: application/json
```

<br>

**3. Check response status**

```{r}
#| echo: true
#| eval: true

# Check response status ----
httr2::resp_status(http_response)
```

<br>

**4. Check response content type**

```{r}
#| echo: true
#| eval: true

# Check response status ----
httr2::resp_content_type(http_response)
```
:::
::::


## Nominatim API client

:::: {.columns}
::: {.column width=50%}
**5. Parse response content**

```{r}
#| echo: true
#| eval: true

# Parse response content ----
content <- httr2::resp_body_json(http_response)

content
```

:::

::: {.column width=50%}
<br>

```{r}
#| echo: true
#| eval: true

# Object type ----
class(content)
```

<br>

```{r}
#| echo: true
#| eval: true

# Object dimensions ----
length(content)
```
:::

::::


## Nominatim API client

:::: {.columns}
::: {.column width=50%}
**5. Parse response content**

```{r}
#| echo: true
#| eval: true

# Parse response content ----
content <- httr2::resp_body_json(http_response)

content
```

:::

::: {.column width=50%}
<br>

```{r}
#| echo: true
#| eval: true

# Object type ----
class(content)
```

<br>

```{r}
#| echo: true
#| eval: true

# Object dimensions ----
length(content)
```

<br>

**6. Clean data**

```{r}
#| echo: true
#| eval: true

# Clean output ----
content <- content[[1]]

content <- data.frame("name" = content$"name",
                      "lon"  = as.numeric(content$"lon"),
                      "lat"  = as.numeric(content$"lat"))
content
```
:::

::::




## Visualization


:::: {.columns}
::: {.column width=50%}

```{r}
#| echo: true
#| eval: false

# Install required package ----
install.packages("maps")
```

<br>

```{r}
#| echo: true
#| eval: false

# Map France boundary ----
maps::map(regions = "France", 
          fill    = TRUE, 
          col     = "black")

# Add retrieved coordinates ----
points(x   = content$"lon", 
       y   = content$"lat", 
       pch = 19, 
       cex = 1, 
       col = "red")

# Add retrieved name ----
text(x      = content$"lon", 
     y      = content$"lat", 
     labels = content$"name", 
     pos    = 2, 
     col    = "white", 
     family = "serif")
```
:::

::: {.column .center width=50%}
```{r}
#| echo: false
#| eval: true
#| fig-width: 4
#| fig-align: 'right'

# Install required package ----
# install.packages("maps")

# Graphical parameters ----
par(mar = rep(0, 4))

# Map France boundary ----
maps::map(regions = "France", 
          fill    = TRUE, 
          col     = "black")

# Add retrieved coordinates ----
points(x   = content$"lon", 
       y   = content$"lat", 
       pch = 19, 
       cex = 1, 
       col = "red")

# Add retrieved name ----
text(x      = content$"lon", 
     y      = content$"lat", 
     labels = content$"name", 
     pos    = 2, 
     col    = "white", 
     family = "serif")
```
:::
::::


## Code factorisation

:::: {.columns}

::: {.column width=50%}
**Function definition**

```{r}
#| echo: true
#| eval: false

get_coords_from_location <- function(city, country) {
  
  # Nominatim API endpoint ----
  endpoint <- "https://nominatim.openstreetmap.org/search"

  # Prepare the HTTP request ----
  http_request <- httr2::request(endpoint)
  
  # Append request parameters ----
  http_request <- http_request |> 
    httr2::req_url_query(city    = city) |> 
    httr2::req_url_query(country = country) |> 
    httr2::req_url_query(format = "json") |> 
    httr2::req_url_query(limit  = 1)
  
  # Send HTTP request  ----
  http_response <- httr2::req_perform(http_request)
  
  # Check response status ----
  httr2::resp_check_status(http_response)
  
  # Parse response content ----
  content <- httr2::resp_body_json(http_response)
  
  # Clean output ----
  content <- content[[1]]
  content <- data.frame("name" = content$"name",
                        "lon"  = as.numeric(content$"lon"),
                        "lat"  = as.numeric(content$"lat"))
  content
}
```
:::

::: {.column width=50%}
:::
::::


## Code factorisation

:::: {.columns}

::: {.column width=50%}
**Function definition**

```{r}
#| echo: true
#| eval: true

get_coords_from_location <- function(city, country) {
  
  # Nominatim API endpoint ----
  endpoint <- "https://nominatim.openstreetmap.org/search"

  # Prepare the HTTP request ----
  http_request <- httr2::request(endpoint)
  
  # Append request parameters ----
  http_request <- http_request |> 
    httr2::req_url_query(city    = city) |> 
    httr2::req_url_query(country = country) |> 
    httr2::req_url_query(format = "json") |> 
    httr2::req_url_query(limit  = 1)
  
  # Send HTTP request  ----
  http_response <- httr2::req_perform(http_request)
  
  # Check response status ----
  httr2::resp_check_status(http_response)
  
  # Parse response content ----
  content <- httr2::resp_body_json(http_response)
  
  # Clean output ----
  content <- content[[1]]
  content <- data.frame("name" = content$"name",
                        "lon"  = as.numeric(content$"lon"),
                        "lat"  = as.numeric(content$"lat"))
  content
}
```
:::

::: {.column width=50%}
**Function usage**

```{r}
#| echo: true
#| eval: true

# Retrieve coordinates ----
get_coords_from_location(city = "Montpellier", country = "France")
```
:::
::::



## Code factorisation

:::: {.columns}

::: {.column width=50%}
**Function definition**

```{r}
#| echo: true
#| eval: true

get_coords_from_location <- function(city, country) {
  
  # Nominatim API endpoint ----
  endpoint <- "https://nominatim.openstreetmap.org/search"

  # Prepare the HTTP request ----
  http_request <- httr2::request(endpoint)
  
  # Append request parameters ----
  http_request <- http_request |> 
    httr2::req_url_query(city    = city) |> 
    httr2::req_url_query(country = country) |> 
    httr2::req_url_query(format = "json") |> 
    httr2::req_url_query(limit  = 1)
  
  # Send HTTP request  ----
  http_response <- httr2::req_perform(http_request)
  
  # Check response status ----
  httr2::resp_check_status(http_response)
  
  # Parse response content ----
  content <- httr2::resp_body_json(http_response)
  
  # Clean output ----
  content <- content[[1]]
  content <- data.frame("name" = content$"name",
                        "lon"  = as.numeric(content$"lon"),
                        "lat"  = as.numeric(content$"lat"))
  content
}
```
:::

::: {.column width=50%}
**Function usage**

```{r}
#| echo: true
#| eval: true

# Retrieve coordinates ----
get_coords_from_location(city = "Montpellier", country = "France")
```

<br>

**Automation**

```{r}
#| echo: true
#| eval: true

# List of cities ----
cities <- c("Montpellier", "Paris", "Strasbourg", "Grenoble", "Bourges")

# Retrieve coordinates ----
coords <- data.frame()

for (city in cities) {
  
  coord <- get_coords_from_location(city = city, country = "France")
  coords <- rbind(coords, coord)
}

coords
```
:::
::::
